#!/system/bin/sh
# Version 1.7.0
# ROM Version
romver="2.0.17"
logfile="/sdcard/vm.log"
scriptdir=$(dirname "$0")
initfile2="$scriptdir/init_done"
initdir="/sdcard/initrom"
useragent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0"
vmconf="/data/data/de.vahrmap.vmapper/shared_prefs/config.xml"
customConfig="/etc/vm_custom_config"

# Create logfile
if [ ! -e /sdcard/vm.log ]; then
  touch /sdcard/vm.log
fi
echo "" >> /sdcard/vm.log
echo "`date +%Y-%m-%d_%T` Device rebooted" >> /sdcard/vm.log

# Redirect stderr to logfile
exec 2>> $logfile

########## Functions

# Download function
download() {
  until /system/bin/curl -s -k -L -A "$useragent" -o "$2" "$1"; do
    sleep 15
  done
}

start_vmapper() {
  /system/bin/vmapper.sh -ua
}

# Network wait function
wait_for_network() {
  until ping -c1 8.8.8.8 >/dev/null 2>/dev/null || ping -c1 1.1.1.1 >/dev/null 2>/dev/null; do
    sleep 20
  done
  ip="$(ifconfig 'eth0' | awk '/inet addr/{print $2}' | cut -d ':' -f 2)"
}

send_mac_and_process_response() {
  local should_exit=false

  while true; do
    current_mac=$(ifconfig eth0 | awk '/HWaddr/{print $5}')
    echo "Current MAC Address: $current_mac"

    if [[ "$current_mac" == "00:15:18:01:81:31" ]]; then
      current_mac=$(xxd -l 6 -p /dev/urandom | sed 's/../&:/g; s/:$//')
      ifconfig eth0 down
      echo "Changing MAC Address to: $current_mac"
      until ifconfig eth0 hw ether "$current_mac" 2>/dev/null; do
        current_mac=$(xxd -l 6 -p /dev/urandom | sed 's/../&:/g; s/:$//')
      done
      ifconfig eth0 up
      sleep 3
    fi

    response="$(/system/bin/curl -s -k -L --user "$auth" -H 'Content-Type: text/html' -H "origin: $origin" "${server}/autoconfig/mymac" -d "$current_mac")"
    echo "Server response: $response"

    if [[ "$response" == *"waiting"* ]]; then
      echo "MAC is in waiting state. Waiting 11 seconds and retrying."
      sleep 11
    elif [[ "$response" == *"change"* ]]; then
      new_mac=$(echo $response | sed -n 's/.*change + \([^"]*\).*/\1/p')
      ifconfig eth0 down
      echo "Changing MAC Address to: $new_mac"
      echo $new_mac > /etc/init.d/new_mac
      until ifconfig eth0 hw ether "$new_mac" 2>/dev/null; do
        new_mac=$(xxd -l 6 -p /dev/urandom | sed 's/../&:/g; s/:$//')
      done
      ifconfig eth0 up
      sleep 3
    elif [[ "$response" == *"confirmed"* ]]; then
      echo "Confirmation received. Continuing the script..."
      should_exit=true
    fi

    if [ "$should_exit" = true ]; then
      break
    fi

    sleep 10
  done
}

check_and_set_mac() {
    local script_dir=$(dirname "$(realpath $0)")
    local file_with_new_mac="${script_dir}/new_mac"

    # Check if the 'new_mac' file exists
    if [ ! -f "${file_with_new_mac}" ]; then
        echo "File ${file_with_new_mac} does not exist."
        return 1
    fi

    # Read the new MAC address from the file
    new_mac=$(cat "${file_with_new_mac}")

    # Log: Step 1 - Deactivate the network interface
    ifconfig eth0 down
    sleep 2  # Short pause after deactivation

    # Set the new MAC address
    until ifconfig eth0 hw ether "${new_mac}" 2>/dev/null; do
        new_mac=$(xxd -l 6 -p /dev/urandom | sed 's/../&:/g; s/:$//')
    done

    # Log: Step 2 - Reactivate the network interface
    ifconfig eth0 up
    sleep 5  # Wait for the interface to come up

    # Check if the change was successful
    current_mac=$(ifconfig eth0 | awk '/HWaddr/{print $5}')
    if [[ "$current_mac" == "$new_mac" ]]; then
        echo "MAC address successfully changed to $new_mac"
    else
        echo "Failed to change MAC address. Current MAC: $current_mac"
    fi
}
####Start#############
mount -o remount,rw /

if [ -f $initdir/init_done ]; then
    if [ -f "$initfile2" ]; then
        echo "Initialization already completed, script will not be re-executed."
        mount -o remount,ro /
	check_and_set_mac
        start_vmapper
        exit 0
    fi
fi

echo "$(date +%Y-%m-%d_%T) 49vmapper: No madmin settings found on device but have vm_custom_config file, assuming new install"  >> $logfile
server=$(awk '{print $1}' "$customConfig")
authuser=$(awk '{print $2}' "$customConfig")
authpassword=$(awk '{print $3}' "$customConfig")
proxy=$(awk '{print $4}' "$customConfig")
auth="$authuser:$authpassword"

wait_for_network
send_mac_and_process_response

# Download VM conf
current_mac=$(ifconfig eth0 | awk '/HWaddr/{print $5}')
current_mac_encoded=$(echo $current_mac | sed 's/:/%3A/g')

while true; do
  response=$(curl -k -s -L --fail --show-error -u $auth -H "origin: $origin" -H "Content-Type: application/octet-stream" "$server/vm_conf?mac=$current_mac_encoded")

  if [ $? -eq 0 ]; then
    echo "Response received:"
    echo "$response" > /data/local/vmconf
    break
  else
    echo "$(date +%Y-%m-%d_%T) Download config.xml failed for origin=$origin, auth=$auth, server=$server from ip=$ip. Retry in 2 seconds..." >> $logfile
    sleep 2
  fi
done

echo "$(date +%Y-%m-%d_%T) 49vmapper: VMapper configuration downloaded" >> $logfile

# Starting install of PoGo, vmapper.sh, and ATVdetailsSender.sh
echo "$(date +%Y-%m-%d_%T) 49vmapper: Starting install of PoGo, vmapper.sh and ATVdetailsSender.sh" >> $logfile

# Download and install vmapper.sh
until /system/bin/curl -s -k -L --fail --show-error -o /system/bin/vmapper.sh https://raw.githubusercontent.com/v-mapper/vmconf/main9/scrips/vmapper.sh || { echo "$(date +%Y-%m-%d_%T) 49vmapper: Download vmapper.sh failed for origin=$origin, auth=$auth, server=$server from ip=$ip. Exit script" >> $logfile ; exit 1; } ;do
    sleep 2
done
chmod +x /system/bin/vmapper.sh
echo "$(date +%Y-%m-%d_%T) 49vmapper: Installed vmapper.sh"  >> $logfile

# Check for PoGo APK on USB, download if not found
usbpogo="$(find /mnt/media_rw/ -iname *pokemongo*.apk 2>/dev/null)"
if [ -z $usbpogo ] ;then
    echo "$(date +%Y-%m-%d_%T) 49vmapper: Downloading PoGo from gensect"  >> $logfile
    until /system/bin/curl -k -s -L --fail --show-error -o /sdcard/Download/pogo.apk -u $auth -H "origin: $origin" "$server/apk/pogo/download" || { echo "$(date +%Y-%m-%d_%T) 49vmapper: Download PoGo failed for origin=$origin, auth=$auth, server=$server from ip=$ip. Exit script" >> $logfile ; exit 1; } ;do
        sleep 2
    done
else
    echo "$(date +%Y-%m-%d_%T) 49vmapper: Copy PoGo from usb"  >> $logfile
    cp $usbpogo /sdcard/Download/pogo.apk
fi
/system/bin/pm install -r /sdcard/Download/pogo.apk
/system/bin/rm -f /sdcard/Download/pogo.apk
echo "$(date +%Y-%m-%d_%T) 49vmapper: Installed PoGo"  >> $logfile

# Download and install ATVdetailsSender.sh
until /system/bin/curl -s -k -L --fail --show-error -o /system/bin/ATVdetailsSender.sh https://raw.githubusercontent.com/v-mapper/vmconf/main9/scrips/ATVdetailsSender.sh || { echo "`date +%Y-%m-%d_%T` 49vmapper: Download ATVdetailsSender.sh failed for origin=$origin, auth=$auth, server=$server from ip=$ip. Exit script" >> $logfile ; exit 1; } ;do
    sleep 2
done
chmod +x /system/bin/ATVdetailsSender.sh
echo "`date +%Y-%m-%d_%T` 49vmapper: Installed ATVdetailsSender.sh"  >> $logfile

usbWebhookSender="$(find /mnt/media_rw/ -iname ATVdetailsWebhook.txt 2>/dev/null)"
if [ ! -z $usbWebhookSender ] ;then
  cp $usbWebhookSender /data/local/ATVdetailsWebhook.config
  touch /sdcard/sendwebhook
  echo "`date +%Y-%m-%d_%T` 49vmapper: ATVdetailsSender configuration copied and enabled"  >> $logfile
fi

# Check PoGo settings
if [[ "$(pm list packages com.nianticlabs.pokemongo)" ]] && ! dumpsys package com.nianticlabs.pokemongo|grep ACCESS_FINE_LOCATION|grep granted|grep -q 'granted=true'; then
  pm grant com.nianticlabs.pokemongo android.permission.ACCESS_FINE_LOCATION
  pm grant com.nianticlabs.pokemongo android.permission.ACCESS_COARSE_LOCATION
  pm grant com.nianticlabs.pokemongo android.permission.CAMERA
  pm grant com.nianticlabs.pokemongo android.permission.GET_ACCOUNTS
  echo "`date +%Y-%m-%d_%T` 49vmapper: PoGo settings adjusted" >> $logfile
fi

# Enable PlayStore for validating play integrity accounts
echo "`date +%Y-%m-%d_%T` 49vmapper: Enable PlayStore for validate play integrity" >> $logfile
dpm enable com.android.vending

# Create the init_done file at the end of your script
echo "Initialization successfully completed." > "$initfile2"

# Install and configure VMapper
echo "`date +%Y-%m-%d_%T` 49vmapper: Starting install of vmapper" >> $logfile
/system/bin/vmapper.sh -nrc -ivw
